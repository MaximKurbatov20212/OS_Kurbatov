Вопрос с семинара: Для чего нужны хедер файлы, помимо удобного чтения кода?

Представим, что у меня в файле list.c лежит 1000 разных функций, которые могут понадобиться для работы со списком
И у меня есть допустим 10 .c файлов, которые должны использовать эти функции. 
Получается, что в каждый файл мне надо написать реализацию этих методов.
В случае использования хедер файла, у нас не будет копирование кода и время компиляции уменьшится.
----------------------------------------------------------------------------------------------------------

Вопрос с семинара: Ошибки  char* strcpy(char *dest, const char *src):

Если мы хотим скопировать большую строку в меньшую, то может случиться все что угодно, поэтому ошибку никак обработать нельзя.
Также строки dest и src не могут перекрываться.
Она возвращает указатель на указатель на буфер, куда было скопированы данные, но я его игнорирую, тк в буфер эти данные уже записаны, а
для других целей мне этот указатель не нужен.

----------------------------------------------------------------------------------------------------------
Вопрос с семинара: Что такое typedef ?

typedef это просто псевоним для какого-либо типа данных. Те он не создает новый тип, а просто переназывает уже существующий
Получается, что мы создали новый тип struct Node и дали ему псеводоним Node, чтобы в дальнейшем не писать слово struct
Источник информации: https://www.gnu.org/software/gnu-c-manual/gnu-c-manual.html#The-typedef-Statement
----------------------------------------------------------------------------------------------------------

Вопрос с семинара: что такое куча?
Куча - это часть памяти процесса, которая используется для выделения памяти во время исполнения программы.

Сама же память процесса состоит из: 
Kernel space - Память ядра, где как раз исполняются системные вызовы. У пользователся нет доступа к этому участку памяти
Stack - память, которая выделяется\очищается автоматически
Memory Mapping segment - адреса, для отображения файлов
Heap  - как раз куча
BSS   - неинициализированные глобальные перменные
Data  - инициализированные глобальные переменные
Text  - сегмент, который хранит код программы
----------------------------------------------------------------------------------------------------------

По поводу malloc
Когда мы вызываем malloc(size), то происходил следующее
1) Куча фрагментирована, и каждого блока памяти в куче есть заголовок, который хранит в себе размер блока памяти, указатель на начало следующего блока памяти
поэтому нам надо выделить не size, а size + sizeof(Header) байт

2) В куче находим свободный участок памяти, который больше по размеру, чем size + sizeof(Header)

3) Происходит системный вызов sbrk(size + sizeof(Header)), который как раз и выделяет память. Делает он это путем сдвига брейк-адреса
sbrk в свою очередь вызывает brk(adress), который уже не сдвигает, а просто устанавливает брейк-адрес на adress

Источники информации: Керниган и Ритчи. Язык программирования Си. Глава 8.7 Распределитель памяти, man malloc, man sbrk, man brk

Брейк-адрес(progam break) - это первый адрес, который идет за сегментом данных. (end of data segment)
